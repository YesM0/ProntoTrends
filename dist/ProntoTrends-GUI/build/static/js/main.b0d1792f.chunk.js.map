{"version":3,"sources":["components/header.js","pages/Home.js","components/NavigationPage.js","pages/DatapipelineStart.js","pages/InspectionStart.js","pages/ValidationStart.js","components/EditableTable.tsx","components/CountrySelector.js","pages/ValidationSetup.js","components/NavBar.js","components/EditableTable-Class.tsx","components/CategoryOverviewSection.tsx","components/Top5Section.tsx","components/ChartDataSection.tsx","components/MainSection_Section.tsx","pages/FinalCsvGeneration.tsx","pages/InputSetup.tsx","pages/DatabaseCredsSetup.tsx","pages/LoggingTest.tsx","pages/Scraper.tsx","pages/FinalCsvInspection.tsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","style","display","flexDirection","backgroundColor","alignItems","justifyContent","flex","viewBox","width","xmlns","fill","d","cx","cy","r","color","fontSize","padding","paddingBottom","fontWeight","marginRight","href","target","rel","Home","textAlign","backgroundImage","marginTop","to","className","Component","NavigationPage","styles","row","item_title","margin","textDecoration","item_description","height","position","top","this","title","items","map","item","link","description","children","DatapipelineStart","id","InspectionStart","ValidationStart","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","EditableTable","initial_columns","dataHandler","useState","React","data","setData","fontFamily","columns","icons","options","search","sorting","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","tableData","onRowDelete","dataDelete","index","splice","onClick","CountrySelector","handleCountryChange","value","onChange","eel","window","set_host","ValidationSetup","state","country","colNames","separators","separators_visible","labels","variableTypes","labelCounts","table_submitted","handleSubmit","bind","handleSeparatorChange","handleTitleInput","handleTableDataSubmit","submittable","length","event","preventDefault","receive_data","destination","res","console","log","alert","val","val_translated","setState","filename","trim","columnNames","dataTypes","distribution","forEach","push","colName","dataType","split","x","labelFrequencyType","lineHeight","alignContent","type","fontStyle","field","lookup","marginBottom","NavSideBar","minWidth","borderRight","listStyle","marginBlockStart","paddingInlineStart","ind","key","NavItem","open","setOpen","hasChildren","ul","child","symbol","paddingLeft","EditableTableClass","draggable","pageSize","handleDataChange","CategoryOverviewSection","handleTableSubmit","filtered","filter","chosen","categories","cat","category_name","column_names","column_name","globalStateSetter","category_overview_settings","category_names","category_column_names","new_data","country_short_code","get_comparisons","getComparisons","prevProps","prevState","snapshot","cellStyle","Top5Section","handleCheck","getFolders","folder_name","e","name","currentTarget","checked","choices","top5_settings","folders_to_use","dpack","ChartDataSection","min_region_count","select_all","handleAllCheck","getTags","get_tags","tag_name","count","chart_settings","tags_selected","curr","min","max","parseInt","MainSection_Section","getOptions","campaign_shortcode","campaign_code","get_category_overviews","main_section_settings","categories_to_include","defaultState","country_short_name","country_full_name","chosenActions","column_remap","map_settings","use_chart_data","FinalCsvGenerationSetup","handleComponentSubmit","handleStart","stateUpdate","emitter","current_chosen_actions","start_final_csv_generation","trigger","triggerStyle","li","required","indexOf","subsection_headers","transitionTime","triggerTagName","paddingTop","borderBottom","align","input_type","tag_settings","InputSetup","handleRadioChange","handleTagInput","handleDBDataGathering","toast","POSITION","BOTTOM_RIGHT","get_keywords_for_tags","tags","placeholder","removeOnBackspace","editComponent","TagField","render","rowData","keywords","join","DatabaseCredsSetup","details","get_db_access_data","host","user","password","save_db_access_data","expose","receiveLog","msg","LoggingComponent","LoggingTest","messages","keptMsgs","sendLogs","sourceFile","scraping_type","scraping_results","files_expected","files_generated","scraping_progress","done","to_do","undefined","progress_rate_per_minute","scraping_items","deduplicate_keywords","ScraperReceiveLog","ScraperComponent","receiveFrontEndLog","ScraperReceiveStatus","update","receiveStatusUpdates","Scraper","fileInput","useDefaultFileHandler","get_scraping_file","filepath","curr_messages","scraping_item","num_todos","num_done","num_files_gen","num_files_exp","cur_progress_rate","time_left","time_left_str","Math","round","triggerWhenOpen","accept","multiple","file","files","disabled","scrape","progress_done","progress_to_do","StatusDisplay","borderRadius","chartType","settings","year","region","available_campaigns","available_files","available_options","regions","datasets","hoverBackgroundColor","FinalCsvInspection","updateFileOptions","updateCampaignOptions","getSelectionOptions","getData","get_available_campaigns","campaigns","label","get_final_category_overviews","get_available_options_from_file","dict","ticket_geo_region_name","Year","full_csv_path","get_data_for_chosen_options","selected","option","provided","container","marginLeft","legend","fontColor","notification","AppComponent","console_log","navItems","App","maxWidth","exact","path","FinalCsvGeneration","Boolean","location","hostname","match","WebFont","load","google","families","ReactDOM","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","message"],"mappings":"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","file":"static/js/main.b0d1792f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = (props) => {\n    //console.log(props)\n    return (\n        <div style={{display: 'flex', flexDirection: 'row', backgroundColor: '#274964', alignItems: 'center', justifyContent: 'flex-start'}}>\n            <div style={{flex: 0}}>\n                <svg viewBox=\"0 0 363.26 114.14\" width=\"120\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#ffffff\"><path d=\"m60.16 54.93 14.39-18.37a24 24 0 00-35 32.17L55 50.38z\" fill=\"#ffffff\"></path><path d=\"m61 63.63-5.34-4.69-12 14.27a24 24 0 0035.03-32.21z\" fill=\"#ffffff\"></path><circle cx=\"33.06\" cy=\"81.08\" r=\"7.45\" fill=\"#ffffff\"></circle><path d=\"m88.61 40.43-14.9-14.9h14.9z\" fill=\"#ffffff\"></path><path d=\"m103.61 71.46v-16.62H109v6.33c1.32-1 2.6-2.75 4.22-2.75h3.43c.79.0 3.91-.38 3.91-4.56.0-4.9-3.24-4.52-4.06-4.52h-12.89v-5.43h12.85c5.61.0 9.23 3.09 9.23 9.91a9.76 9.76.0 01-9.08 10.18h-3.39c-1 .15-3 2.37-6.15 4.78zm107.39-10.06c0 2.45.38 4.1 1.13 5a5.34 5.34.0 006.94.0c.75-.87 1.13-2.52 1.13-5s-.38-4.11-1.13-5a4.35 4.35.0 00-3.47-1.28 4.41 4.41.0 00-3.47 1.28q-1.13 1.32-1.13 5zm-4.78.0c0-3.28.79-5.8 2.41-7.54a9 9 0 016.93-2.64c3 0 5.32.87 6.94 2.64s2.41 4.26 2.41 7.54-.79 5.8-2.41 7.53a9 9 0 01-6.94 2.64c-3 0-5.31-.87-6.93-2.64s-2.46-4.25-2.46-7.53zm-16.32-5.84v-4.07h3.32v-5.84h4.75v5.84h4.67v4.07h-4.67v9.76a2.3 2.3.0 00.52 1.73 3 3 0 001.89.45 6 6 0 002.26-.41V71a8.12 8.12.0 01-3.05.56h-.12a6.12 6.12.0 01-4.63-1.73 6.58 6.58.0 01-1.7-4.79v-9.48zm-22.3 15.71v-17.94a20.23 20.23.0 019.08-2.14 9.11 9.11.0 016.44 2.14 7.86 7.86.0 012.34 6v11.9h-4.76v-12.23a4.48 4.48.0 00-.15-1.32 5.2 5.2.0 00-.57-1.13 2.64 2.64.0 00-1.43-.87 9.19 9.19.0 00-2.52-.3 20.61 20.61.0 00-3.66.34v15.51h-4.82zm-19-9.87c0 2.45.37 4.1 1.13 5a5.33 5.33.0 006.93.0c.75-.87 1.13-2.52 1.13-5s-.38-4.11-1.13-5a5.33 5.33.0 00-6.93.0c-.73.89-1.13 2.6-1.13 5zm-4.79.0c0-3.28.79-5.8 2.41-7.54a9 9 0 016.93-2.64c3 0 5.32.87 6.94 2.64s2.41 4.26 2.41 7.54-.79 5.8-2.41 7.53a9 9 0 01-6.94 2.64c-3 0-5.31-.87-6.93-2.64s-2.41-4.25-2.41-7.53zm-13 9.87v-18c.34-.15.76-.34 1.32-.57a28.23 28.23.0 013.43-.9 26.45 26.45.0 015.09-.64v4.11a19 19 0 00-5.09.64v15.28h-4.75z\" fill=\"#ffffff\"></path><path d=\"m246.87 47.9h-8.13v23.16H233v-23.16h-8.12v-4.64h22z\" fill=\"#ffffff\"></path><path d=\"m250.85 54.57A8.82 8.82.0 01253 51.9a4.46 4.46.0 012.87-1 3.6 3.6.0 012.19.64l-.35 3.91a.82.82.0 01-.3.52.87.87.0 01-.54.15 6 6 0 01-.88-.09 7.05 7.05.0 00-1.08-.08 3.49 3.49.0 00-1.29.21 3 3 0 00-1 .59 4.1 4.1.0 00-.79.94 8.25 8.25.0 00-.66 1.26v12.11h-5.29V51.31h3.12a1.66 1.66.0 011.11.29 1.83 1.83.0 01.43 1z\" fill=\"#ffffff\"></path><path d=\"m264.09 62a6.31 6.31.0 001.58 4.06 4.83 4.83.0 003.48 1.28 5.91 5.91.0 001.89-.26 9.7 9.7.0 001.4-.57l1.09-.58a2 2 0 011-.25 1.12 1.12.0 011 .46l1.47 1.91a8.52 8.52.0 01-1.86 1.62 10 10 0 01-2.11 1 11.48 11.48.0 01-2.2.51 16.09 16.09.0 01-2.15.15 10.88 10.88.0 01-3.86-.68 9 9 0 01-3.12-2 9.39 9.39.0 01-2.1-3.31 12.6 12.6.0 01-.76-4.58 10.6 10.6.0 01.66-3.79 8.82 8.82.0 014.93-5.2 9.91 9.91.0 014-.78 9.71 9.71.0 013.5.61 7.78 7.78.0 012.76 1.75 8 8 0 011.8 2.82 10.64 10.64.0 01.64 3.83 6.42 6.42.0 01-.06 1 1.82 1.82.0 01-.19.62.7.7.0 01-.37.31 1.63 1.63.0 01-.59.09zm8.32-3.14a5.37 5.37.0 00-.23-1.57 3.48 3.48.0 00-.69-1.32 3.39 3.39.0 00-1.21-.92 4.22 4.22.0 00-1.74-.33 4 4 0 00-3 1.07 5.4 5.4.0 00-1.4 3.07z\" fill=\"#ffffff\"></path><path d=\"m285.32 53.61a12.29 12.29.0 011.23-1.06 8.62 8.62.0 011.36-.82 7 7 0 011.56-.53 7.88 7.88.0 011.8-.2 7 7 0 012.86.56 5.81 5.81.0 012.1 1.55 6.65 6.65.0 011.28 2.38 9.93 9.93.0 01.43 3v12.57h-5.26v-12.55a3.87 3.87.0 00-.77-2.56 2.81 2.81.0 00-2.26-.9 4.67 4.67.0 00-2.09.47 7.21 7.21.0 00-1.86 1.35v14.19h-5.29V51.31h3.26a1.29 1.29.0 011.32.92z\" fill=\"#ffffff\"></path><path d=\"m319.63 42.5v28.56h-3.26a1.23 1.23.0 01-1.3-.92l-.44-1.72a11.6 11.6.0 01-1.26 1.18 8 8 0 01-1.43.93 7.3 7.3.0 01-1.64.61 8.31 8.31.0 01-1.92.21 6.3 6.3.0 01-2.91-.68 6.44 6.44.0 01-2.29-2 9.62 9.62.0 01-1.5-3.17 15.53 15.53.0 01-.54-4.29 13.55 13.55.0 01.6-4.1 10.23 10.23.0 011.72-3.28 8 8 0 012.68-2.16 7.75 7.75.0 013.49-.79 6.8 6.8.0 012.71.49 7 7 0 012 1.3V42.5zm-5.29 13.94a4.27 4.27.0 00-1.62-1.2 5 5 0 00-1.85-.35 4 4 0 00-1.74.37 3.34 3.34.0 00-1.35 1.14 5.49 5.49.0 00-.87 2 11.46 11.46.0 00-.31 2.87 13.2 13.2.0 00.25 2.8 5.56 5.56.0 00.72 1.86 2.77 2.77.0 001.14 1 3.46 3.46.0 001.49.32 4.62 4.62.0 002.35-.56 6.8 6.8.0 001.79-1.57z\" fill=\"#ffffff\"></path><path d=\"m336.29 55.37a1.53 1.53.0 01-.43.47 1 1 0 01-.6.14 1.79 1.79.0 01-.79-.19l-.9-.41a7.87 7.87.0 00-1.14-.41 5.11 5.11.0 00-1.48-.19 3.21 3.21.0 00-2 .53 1.61 1.61.0 00-.71 1.38 1.35 1.35.0 00.4 1 3.55 3.55.0 001.06.7 12.87 12.87.0 001.5.55q.85.26 1.74.57a15.32 15.32.0 011.73.71 5.83 5.83.0 011.51 1 4.51 4.51.0 011.46 3.52 6.63 6.63.0 01-.52 2.65 5.92 5.92.0 01-1.55 2.1 7.3 7.3.0 01-2.53 1.38 11.15 11.15.0 01-3.48.5 10.37 10.37.0 01-2-.19 11.52 11.52.0 01-1.9-.51 13.79 13.79.0 01-1.69-.78 7 7 0 01-1.35-1l1.22-2a1.61 1.61.0 01.53-.54 1.52 1.52.0 01.81-.19 1.66 1.66.0 01.88.24l.9.52a8.83 8.83.0 001.18.52 5.5 5.5.0 001.7.23 4.32 4.32.0 001.32-.17 2.4 2.4.0 00.9-.47 1.82 1.82.0 00.51-.67 1.87 1.87.0 00.16-.77 1.47 1.47.0 00-.41-1.07 3.76 3.76.0 00-1.07-.71 10.31 10.31.0 00-1.53-.56c-.57-.17-1.16-.35-1.75-.56a13.86 13.86.0 01-1.74-.72 5.87 5.87.0 01-1.52-.97 4.84 4.84.0 01-1.07-1.58 6.17 6.17.0 01.07-4.6 5.41 5.41.0 011.43-1.95 7.16 7.16.0 012.39-1.34 10 10 0 013.3-.5 10.17 10.17.0 013.83.69 8.33 8.33.0 012.84 1.8z\" fill=\"#ffffff\"></path></g></svg>\n            </div>\n            <div style={{flex: 2, color: 'white', fontSize: '1.1rem', padding: '5px', paddingBottom: '7px', fontWeight: '100', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginRight: '2rem'}}>\n                <div>Data Tools</div>\n                <a href={\"https://sites.google.com/prontopro.fr/in-house-prontowiki/teams/prontotrends\"} target=\"_blank\" rel=\"noopener noreferrer\">Info</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React, {Component} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nclass Home extends Component {\n\n    render() {\n        return (\n            <div>\n                <div style={{\n                    padding: '6rem',\n                    backgroundColor: '#274964',\n                    color: 'white',\n                    textAlign: 'left',\n                    backgroundImage: `url($)`\n                }}>\n                    <h1 style={{fontWeight: '100', fontSize: '2.66rem'}}>Welcome to ProntoTrends</h1>\n                    <h3 style={{fontWeight: '100'}}>How can we help you today?</h3>\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        width: '100%',\n                        justifyContent: 'center',\n                        marginTop: '2rem'\n                    }}>\n                        <NavLink to=\"/DataPipeline\" className={'button'}>Enter Datapipeline</NavLink>\n                        <NavLink to=\"/Inspection\" className={'button'}>Enter Inspection</NavLink>\n                    </div>\n                </div>\n                <div style={ {padding: '2rem 3rem', textAlign: 'left' }}>\n                    <h2>What is ProntoTrends?</h2>\n                    <p>\n                        ProntoTrends is the place where consumers and journalists can find all information around\n                        services\n                        offered on ProntoPro\n                    </p>\n                    <h2>\n                        What is this tool for?\n                    </h2>\n                    <p>\n                        The ProntoTrends software suite supports you in creating the content to be presented on the\n                        website.\n                        From Scraping over final data generation to inspection everything is included.\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Home;","import React, {Component} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nclass NavigationPage extends Component {\n\n    styles = {\n    row: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    item_title: {\n        flex: 2.5,\n        padding: '1rem',\n        margin: '1rem',\n        textDecoration: 'none'\n    },\n    item_description: {\n        flex: 1,\n        padding: '1rem',\n        margin: '1rem',\n        textDecoration: 'none',\n        color: 'grey'\n    }\n}\n\n    render() {\n        return (\n            <div>\n                <div style={{\n                    height: '30%',\n                    backgroundColor: \"#274964\",\n                    color: 'white',\n                    padding: '2.5rem 4rem',\n                    textAlign: 'left'\n                }}>\n                    <h1 style={{fontWeight: '100', fontSize: '2.66rem', position: 'sticky', top: '10px'}}>{this.props.title || \"Datapipeline\"}</h1>\n                    <h3 style={{fontWeight: '100'}}>What step do you want to take next?</h3>\n                </div>\n                <div>\n                    {this.props.items.map(item => (<NavLink to={item.link} style={this.styles.row}>\n                        <div style={this.styles.item_title}>{item.title}</div>\n                        <div style={this.styles.item_description}>{item.description}</div>\n                    </NavLink>))}\n                </div>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default NavigationPage;\n\n","import React, {Component} from \"react\";\nimport NavigationPage from \"../components/NavigationPage\";\n\nclass DatapipelineStart extends Component {\n\n    items = [\n        {\n            id: 0,\n            link: '/Datapipeline-InputSetup',\n            title: 'Prepare Inputs for Scraping',\n            description: 'You can do a lot of stuff here'\n        },\n        {\n            id: 1,\n            link: '/Datapipeline-Scraping',\n            title: 'Prepare Inputs for Scraping',\n            description: 'You can do a lot of stuff here'\n        },\n        {\n            id: 3,\n            link: '/Datapipeline-FinalCsvGeneration',\n            title: 'Generate final CSVs',\n            description: 'You can do a lot of stuff here'\n        },\n        {\n            id: 4,\n            link: '/Datapipeline-Validation',\n            title: 'Validate created files pre-upload',\n            description: 'You can do a lot of stuff here'\n        },\n\n    ]\n\n    render() {\n        return (\n            <NavigationPage items={this.items}/>\n        );\n    }\n}\n\nexport default DatapipelineStart;\n","import React, {Component} from \"react\";\nimport NavigationPage from \"../components/NavigationPage\";\n\nclass InspectionStart extends Component {\n\n    items = [\n        {\n            id: 0,\n            link: '/IndividualInspection',\n            title: 'Inspect data on individual Tags',\n            description: 'You can do a lot of stuff here'\n        },\n        {\n            id: 1,\n            link: '/ComparisonInspection',\n            title: 'Inspect comparisons',\n            description: 'You can do a lot of stuff here'\n        },\n    ]\n\n    render() {\n        return (\n            <NavigationPage items={this.items}/>\n        );\n    }\n}\n\nexport default InspectionStart;\n","import React, {Component} from \"react\";\nimport NavigationPage from \"../components/NavigationPage\";\n\nclass ValidationStart extends Component {\n\n    items = [\n        {\n            id: 0,\n            link: '/ValidationSetup',\n            title: 'Prepare the rules for Validation',\n            description: 'You can do a lot of stuff here'\n        },\n        {\n            id: 1,\n            link: '/Validation',\n            title: 'Validate files for upload',\n            description: 'You can do a lot of stuff here'\n        },\n    ]\n\n    render() {\n        return (\n            <NavigationPage items={this.items} title={'Validation'}/>\n        );\n    }\n}\n\nexport default ValidationStart;\n","import * as React from 'react'\nimport MaterialTable, {Column} from \"material-table\";\nimport {forwardRef} from 'react';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\n// icon types\nimport {Icons} from \"material-table\";\n\nconst tableIcons: Icons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref}/>),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref}/>),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref}/>),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref}/>),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\n};\n\n\ninterface EditableTableProps<RowData extends object> {\n    initial_columns: Array<Column<RowData>>,\n    title: string,\n    dataHandler: (data: RowData[]) => void,\n    initialData?: Array<object>\n}\n\nfunction EditableTable({initial_columns, title, dataHandler}: EditableTableProps<any>) {\n    const {useState} = React;\n    //const [columns, setColumns] = useState(initial_columns);\n    const [data, setData] = useState([]);\n    return (\n        <>\n            <MaterialTable\n                style={{fontSize: '1rem', fontFamily: 'inherit'}}\n                title={title}\n                columns={initial_columns}\n                data={data}\n                icons={tableIcons}\n                options={{\n                    search: false,\n                    sorting: false\n                }}\n                editable={{\n                    onRowAdd: newData =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                // @ts-ignore\n                                setData([...data, newData]);\n\n                                resolve();\n                            }, 1000)\n                        }),\n                    onRowUpdate: (newData, oldData) =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                const dataUpdate = [...data];\n                                const index = oldData.tableData.id;\n                                // @ts-ignore\n                                dataUpdate[index] = newData;\n                                setData([...dataUpdate]);\n\n                                resolve();\n                            }, 1000)\n                        }),\n                    onRowDelete: oldData =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                const dataDelete = [...data];\n                                const index = oldData.tableData.id;\n                                dataDelete.splice(index, 1);\n                                setData([...dataDelete]);\n\n                                resolve()\n                            }, 1000)\n                        }),\n                }}\n            />\n            <button onClick={() => dataHandler(data)} className={'button'}>\n                Save Table Data\n            </button>\n        </>\n    )\n}\n\nexport default EditableTable;","import React from 'react';\n\nfunction CountrySelector({handleCountryChange, value}) {\n    return (\n        <select\n            className={'input'} onChange={handleCountryChange} value={value}>\n            <option value={'Germany'}>Germany</option>\n            <option value={'Italy'}>Italy</option>\n            <option value={'France'}>France</option>\n            <option value={'Spain'}>Spain</option>\n            <option value={'Austria'}>Austria</option>\n            <option value={'Switzerland'}>Switzerland</option>\n        </select>\n    );\n}\n\nexport default CountrySelector;","import React, {Component} from \"react\";\nimport EditableTable from \"../components/EditableTable\";\nimport CountrySelector from \"../components/CountrySelector\";\n\n// TODO: Combine Finished and Save button -> requires rewriting the Table Component to a class component or use this: https://stackoverflow.com/questions/27864951/how-to-access-childs-state-in-react\n// THIS USES A OLDER VERSION OF EDITABLE TABLE -> THE EDITABLETABLECLASS COMPONENT HAS BEEN CONVERTED TO A FULLY CONTROLLED COMPONENT\n\n\nexport const eel = window.eel\neel.set_host('ws://localhost:8080')\n\nclass ValidationSetup extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            country: 'Germany',\n            title: '',\n            colNames: [],\n            separators: ',',\n            separators_visible: ',',\n            labels: {},\n            variableTypes: {},\n            labelCounts: {},\n            table_submitted: false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleSeparatorChange = this.handleSeparatorChange.bind(this)\n        this.handleTitleInput = this.handleTitleInput.bind(this)\n        this.handleTableDataSubmit = this.handleTableDataSubmit.bind(this)\n        this.handleCountryChange = this.handleCountryChange.bind(this)\n        this.submittable = this.submittable.bind(this)\n    }\n\n    submittable(state) {\n        // check: hasCountry, hasTitle, hasColumnNames\n        return (state.country.length > 0 && state.title.length > 0 && state.colNames.length > 0)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (!this.state.table_submitted) {\n            alert('Please save the column data in the table first')\n        } else {\n            if (!this.submittable(this.state)) {\n                alert(\"The data you filled is insufficient. Make sure that you added a Filename and Column Names\")\n            } else {\n                eel.receive_data({destination: 'ValidationSetUp', data: this.state})((res) => console.log(res))\n            }\n        }\n    }\n\n    handleSeparatorChange(event) {\n        let val = event.target.value;\n        if (val === ',' || val === ';' || val === '\\t' || val === 'TAB') {\n            let val_translated = (val === '\\t') ? \"TAB\" : val;\n            val = (val === 'TAB') ? '\\t' : val\n            this.setState({separators: val, separators_visible: val_translated})\n        }\n    }\n\n    handleCountryChange(event) {\n        this.setState({country: event.target.value})\n    }\n\n    handleTitleInput(event) {\n        let filename = event.target.value.trim();\n        this.setState({title: filename})\n    }\n\n\n    handleTableDataSubmit(data) {\n        console.log(data)\n        let columnNames = [];\n        let dataTypes = {};\n        let labels = {};\n        let distribution = {};\n        data.forEach(item => {\n            columnNames.push(item.colName);\n            dataTypes[item.colName] = item.dataType;\n            labels[item.colName] = (item.labels) ? item.labels.split(\",\").map(x => x.trim()) : null;\n            distribution[item.colName] = item.labelFrequencyType\n        })\n        this.setState({\n            colNames: columnNames,\n            labels: labels,\n            variableTypes: dataTypes,\n            labelCounts: distribution,\n            table_submitted: true,\n        }, () => console.log(this.state))\n    }\n\n    render() {\n        return (\n            <div className={'internal-component'} style={{textAlign: 'left'}}>\n                <div style={{\n                    height: '30%',\n                    color: 'white',\n                    padding: '2.5rem 4rem',\n                    textAlign: 'left'\n                }}>\n                    <h1 style={{fontWeight: '100', fontSize: '2.66rem'}}>Validation Setup</h1>\n                    <p style={{fontWeight: '100'}}>\n                        Validation is the last step before the upload of data to the Website. It checks all files for\n                        errors or inconsistencies and proposes solutions.\n                        <br/><br/>\n                        In the setup stage you want to program the rules to be applied to new files. Often previous\n                        patterns can be reused but here you can edit everything necessary to work for your specific file\n                    </p>\n                </div>\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    padding: '1.5rem',\n                    lineHeight: '2rem',\n                    justifyContent: 'space-between',\n                    alignContent: 'space-between'\n                }}>\n                    <div>\n                        <h2>Let's set up some new validation rules.</h2>\n                        <label className={'label'}>\n                            Country\n                            <CountrySelector value={this.state.country} handleCountryChange={this.handleCountryChange}/>\n                        </label>\n                        <label className={'label'}>\n                            Filename\n                            <input className={'input'} type={'text'} onChange={this.handleTitleInput}\n                                   value={this.state.title}/>\n                        </label>\n                        <br/>\n                        <label className={'label'}>\n                            Column Separator to use:\n                            <select style={{margin: '1rem'}} onChange={this.handleSeparatorChange}\n                                    value={this.state.separators_visible}>\n                                <option value=\",\">,</option>\n                                <option value=\";\">;</option>\n                                <option value=\"TAB\">TAB</option>\n                            </select>\n                        </label>\n                        <br/>\n                        <small style={{lineHeight: '0.2rem', fontWeight: '100', fontStyle: 'italic'}}>\n                            Use the following table to set up rules for the columns. Please ensure that the order of the\n                            rows in the table corresponds to the order of the columns in the final file.\n                            <br/>\n                            For the labels you can use the following constants to avoid having to type too much:\n                            REGIONS_SPAIN, REGIONS_GERMANY, REGIONS_ITALY, REGIONS_FRANCE. Ensure proper spelling!\n                        </small>\n                        <EditableTable initial_columns={[\n                            {\n                                title: 'Column Name (capitalization is important)',\n                                field: 'colName'\n                            },\n                            {\n                                title: 'Data-Type (e.g. \"dec|0-1\")',\n                                field: 'dataType'\n                            },\n                            {\n                                title: 'Labels in Col (separate using \",\")',\n                                field: 'labels'\n                            },\n                            {\n                                title: 'Label frequency distribution',\n                                field: 'labelFrequencyType',\n                                lookup: {\n                                    'equal': 'Equal',\n                                    'unequal': 'Unequal'\n                                }\n                            }\n                        ]} title={'Columns Setup'} dataHandler={this.handleTableDataSubmit}\n                        />\n                    </div>\n                </div>\n                <button onClick={this.handleSubmit} className={'button'} style={{marginBottom: '2rem'}}>\n                    Finish and Create File\n                </button>\n\n            </div>\n        )\n    }\n}\n\nexport default ValidationSetup;\n","import React, {useState} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\n\nconst NavSideBar = ({items}) => {\n    return (\n        <div style={{flex: 1, minWidth: '100%', backgroundColor: '#274964', color: 'white', borderRight: '10px white'}}>\n            <ul style={{\n                listStyle: 'none',\n                textAlign: 'left',\n                margin: 0,\n                marginBlockStart: 0,\n                paddingInlineStart: 0,\n                lineHeight: '2rem',\n                padding: '1rem'\n            }}>\n                {items.map((item, ind) => <NavItem\n                    key={ind} item={item}/>)}\n            </ul>\n        </div>\n    )\n}\n\nexport default NavSideBar;\n\nconst NavItem = ({item}) => {\n    let [open, setOpen] = useState(false);\n    let hasChildren = (item.children);\n    let children = (hasChildren) ? (<ul style={styles.ul}>{item.children.map((child, ind) => <NavItem\n        key={ind} item={child}/>)}</ul>) : null;\n    let symbol = (!open) ? '▶️' : '🔽';\n    return (\n        <li>\n            <NavLink\n                to={item.link}>{item.title}</NavLink><span style={{paddingLeft: '0.5rem'}}  onClick={() => setOpen(!open)}>{hasChildren && symbol}</span>\n            {open && children}\n        </li>\n    )\n}\n\nconst styles = {\n    ul: {\n        margin: 0,\n        listStyle: 'none',\n        paddingInlineStart: '10%',\n        fontSize: '90%',\n        lineHeight: '1.7'\n    }\n}","import React, {Component} from 'react'\nimport MaterialTable, {Column} from \"material-table\";\nimport {forwardRef} from 'react';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\n// icon types\nimport {Icons} from \"material-table\";\n\nconst tableIcons: Icons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref}/>),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref}/>),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref}/>),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref}/>),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\n};\n\n\ninterface EditableTableProps<RowData extends object> {\n    initial_columns: Array<Column<RowData>>,\n    title: string,\n    data: Array<RowData>,\n    handleDataChange: (data: RowData[]) => void\n}\n\nconst timeoutDuration = 10;\n\nclass EditableTableClass extends Component<EditableTableProps<any>, Readonly<any>> {\n\n    render() {\n        return (\n        <>\n            <MaterialTable\n                style={{fontSize: '1rem', fontFamily: 'inherit'}}\n                title={this.props.title}\n                columns={this.props.initial_columns}\n                data={this.props.data}\n                icons={tableIcons}\n                options={{\n                    search: false,\n                    sorting: false,\n                    draggable: false,\n                    pageSize: 10\n                }}\n                editable={{\n                    onRowAdd: newData =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                this.props.handleDataChange([...this.props.data, newData]);\n\n                                resolve();\n                            }, timeoutDuration)\n                        }),\n                    onRowUpdate: (newData, oldData) =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                const dataUpdate = [...this.props.data];\n                                const index = oldData.tableData.id;\n                                dataUpdate[index] = newData;\n                                this.props.handleDataChange([...dataUpdate]);\n\n                                resolve();\n                            }, timeoutDuration)\n                        }),\n                    onRowDelete: oldData =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                const dataDelete = [...this.props.data];\n                                const index = oldData.tableData.id;\n                                dataDelete.splice(index, 1);\n                                this.props.handleDataChange([...dataDelete]);\n\n                                resolve()\n                            }, timeoutDuration)\n                        }),\n                }}\n            />\n        </>\n    );\n    }\n}\n\nexport default EditableTableClass\n","import {Component} from \"react\";\nimport {eel} from \"../App\";\nimport EditableTableClass from \"./EditableTable-Class\";\nimport * as React from \"react\";\nimport { SubStateComponentProps } from '../pages/FinalCsvGeneration'\n\ninterface CatOverviewProps extends SubStateComponentProps {\n    country_short_code: string\n}\n\ninterface TableRow {\n    category_name: string,\n    chosen: boolean,\n    column_name: string\n}\n\ninterface CatOverviewState {\n    data: TableRow[]\n}\n\nclass CategoryOverviewSection extends Component<CatOverviewProps, CatOverviewState> {\n    constructor(props: CatOverviewProps) {\n        super(props);\n        this.state = {\n            data: []\n        }\n        //console.log(this.state)\n        this.handleTableSubmit = this.handleTableSubmit.bind(this)\n        this.handleDataChange = this.handleDataChange.bind(this)\n    }\n\n    handleTableSubmit() {\n        // reformat\n        let data = this.state.data\n        let filtered = data.filter(item => (item.chosen))\n        let categories = filtered.map(cat => cat.category_name)\n        let column_names = filtered.map(cat => cat.column_name)\n        this.props.globalStateSetter({\n            category_overview_settings: {\n                category_names: categories,\n                category_column_names: column_names\n            }\n        }, 'Create Category Overviews')\n    }\n\n    handleDataChange(new_data: Array<TableRow>) {\n        this.setState({data: new_data})\n    }\n\n    async getComparisons(country_short_code: string)\n        :\n        Promise<TableRow[]> {\n        let data = await eel.get_comparisons(country_short_code)();\n        // console.log(\"get comparisons result:\")\n        // console.log(availableCategories)\n        return data.map((cat: string) => {\n            return {\n                category_name: cat,\n                chosen: false,\n                column_name: ''\n            }\n        })\n    }\n\n    async componentDidMount() {\n        this.setState({data: await this.getComparisons(this.props.country_short_code)})\n    }\n\n    async componentDidUpdate(prevProps: Readonly<CatOverviewProps>, prevState: Readonly<CatOverviewState>, snapshot?: any) {\n        console.log(\"Updated CategoryOverviewSection State\")\n        console.log(this.state, this.props)\n        if (prevProps.country_short_code !== this.props.country_short_code) {\n            console.log(\"Country changed\")\n            this.setState({data: await this.getComparisons(this.props.country_short_code)})\n        }\n    }\n\n    render() {\n        return (\n            <div style={{\n                padding: '1rem 0rem'\n            }}>\n                <EditableTableClass initial_columns={[\n                    {\n                        field: 'category_name',\n                        title: 'Category',\n                        cellStyle: {\n                            fontSize: '0.8rem'\n                        },\n                        editable: 'never'\n                    },\n                    {\n                        field: 'chosen',\n                        title: 'Choose?',\n                        type: \"boolean\"\n                    },\n                    {\n                        field: 'column_name',\n                        title: 'Column Name (has to end on _type)',\n                        type: 'string'\n                    }\n                ]} title={'Category Overview Settings'} data={this.state.data}\n                                    handleDataChange={this.handleDataChange}/>\n\n                <button onClick={this.handleTableSubmit} className={'button'} style={{\n                    fontSize: '0.9rem', marginBottom: '1rem'\n                }}>\n                    Add the selected Category Overviews to the Task-List\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default CategoryOverviewSection\n","import * as React from 'react';\nimport {SubStateComponentProps} from \"../pages/FinalCsvGeneration\";\nimport {eel} from '../App'\nimport {Component} from \"react\";\n\ninterface Top5_Props extends SubStateComponentProps {\n    country_short_code: string\n}\n\ninterface FolderItem {\n    folder_name: string,\n    chosen: boolean\n}\n\ninterface Top5_State {\n    data: FolderItem[]\n}\n\nclass Top5Section extends Component<Top5_Props, Top5_State> {\n    constructor(props: Top5_Props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n        this.handleCheck = this.handleCheck.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    async componentDidMount() {\n        this.setState({data: await this.getFolders(this.props.country_short_code)})\n    }\n\n    async getFolders(country_short_code: string)\n        :\n        Promise<FolderItem[]> {\n        let data = await eel.get_comparisons(country_short_code)();\n        // console.log(\"get comparisons result:\")\n        // console.log(availableCategories)\n        return data.map((cat: string) => {\n            return {\n                folder_name: cat,\n                chosen: false\n            }\n        })\n    }\n\n    handleCheck(e: React.FormEvent<HTMLInputElement>) {\n        let name = e.currentTarget.name\n        let checked = e.currentTarget.checked\n        let new_data = this.state.data.map(item => {\n            if (item.folder_name === name) {\n                return {\n                    folder_name: item.folder_name,\n                    chosen: checked\n                }\n            } else {\n                return item\n            }\n        })\n        this.setState({\n            data: new_data\n        })\n    }\n\n    handleSubmit() {\n        let choices = this.state.data.filter(item => (item.chosen)).map(item => item.folder_name)\n        this.props.globalStateSetter({\n            top5_settings: {\n                folders_to_use: choices\n            }\n        }, 'Create Top5')\n    }\n\n    render() {\n        return (\n            <>\n                <table>\n                    <thead>\n                    <td>\n                        Folder\n                    </td>\n                    <td>\n                        Choose?\n                    </td>\n                    </thead>\n                    {this.state.data.map(dpack => {\n                        return (\n                            <tr key={dpack.folder_name}>\n                                <td>{dpack.folder_name}</td>\n                                <td><input name={dpack.folder_name} type={'checkbox'} checked={dpack.chosen}\n                                           onChange={this.handleCheck}/></td>\n                            </tr>\n                        )\n                    })}\n                </table>\n                <button onClick={this.handleSubmit} className={'button'} style={{\n                    fontSize: '0.9rem', marginBottom: '1rem'\n                }}>\n                    Add Top5-creation with the chosen Folders to the task list\n                </button>\n            </>\n        );\n    }\n}\n\n// TODO: Add merge tags options\n\nexport default Top5Section","import * as React from 'react';\nimport {SubStateComponentProps} from \"../pages/FinalCsvGeneration\";\nimport {eel} from '../App'\nimport {ChangeEvent, Component} from \"react\";\n\ninterface ChartDataProps extends SubStateComponentProps {\n    country_short_code: string\n}\n\ninterface Tag_Item {\n    tag_name: string,\n    count: number,\n    chosen: boolean\n}\n\ninterface ChartData_State {\n    data: Tag_Item[],\n    min_region_count: number,\n    select_all: boolean\n}\n\nclass ChartDataSection extends Component<ChartDataProps, ChartData_State> {\n    constructor(props: ChartDataProps) {\n        super(props);\n        this.state = {\n            data: [],\n            min_region_count: 0,\n            select_all: false\n        }\n        this.handleCheck = this.handleCheck.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleAllCheck = this.handleAllCheck.bind(this)\n    }\n\n    async componentDidMount() {\n        this.setState({data: await this.getTags(this.props.country_short_code)})\n    }\n\n    async getTags(country_short_code: string)\n        :\n        Promise<Tag_Item[]> {\n        return await eel.get_tags(country_short_code)();\n    }\n\n    handleCheck(e: React.FormEvent<HTMLInputElement>) {\n        let name = e.currentTarget.name\n        let checked = e.currentTarget.checked\n        let new_data = this.state.data.map(item => {\n            if (item.tag_name === name) {\n                return {\n                    tag_name: item.tag_name,\n                    count: item.count,\n                    chosen: checked\n                }\n            } else {\n                return item\n            }\n        })\n        this.setState({\n            data: new_data\n        })\n    }\n\n    handleSubmit() {\n        let choices = this.state.data.filter(item => (item.chosen)).map(item => item.tag_name)\n        this.props.globalStateSetter({\n            chart_settings: {\n                tags_selected: choices,\n                min_region_count: this.state.min_region_count\n            }\n        }, 'create Chart Data')\n    }\n\n    handleAllCheck(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            data: this.state.data.map(item => {\n                let curr = {...item}\n                curr['chosen'] = e.currentTarget.checked\n                return curr\n            }),\n            select_all: e.currentTarget.checked\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <label className={'label'}>\n                        Min Region Count\n                        <input className={'input'} type={'number'} value={this.state.min_region_count} min={0} max={30}\n                               onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                   this.setState({min_region_count: parseInt(e.target.value)})\n                               }}/>\n                    </label>\n                <table>\n                    <thead>\n                    <td>\n                        Tag\n                    </td>\n                    <td>\n                        # Regions\n                    </td>\n                    <td>\n                        Choose?\n                    </td>\n                    </thead>\n                    {this.state.data.map(dpack => {\n                        return (\n                            <tr key={dpack.tag_name}>\n                                <td>{dpack.tag_name}</td>\n                                <td>{dpack.count}</td>\n                                <td><input name={dpack.tag_name} type={'checkbox'} checked={dpack.chosen}\n                                           onChange={this.handleCheck}/></td>\n                            </tr>\n                        )\n                    })}\n                </table>\n                <label>\n                    Select All\n                    <input type={'checkbox'} checked={this.state.select_all} onChange={this.handleAllCheck}/>\n                </label>\n                <button onClick={this.handleSubmit} className={'button'} style={{\n                    fontSize: '0.9rem', marginBottom: '1rem'\n                }}>\n                    Add Chart Creation with the chosen Tags to Task-List\n                </button>\n            </>\n        );\n    }\n}\n\nexport default ChartDataSection","import * as React from 'react';\nimport {Component} from 'react';\nimport {SubStateComponentProps} from \"../pages/FinalCsvGeneration\";\nimport {eel} from '../App'\n\ninterface MainSection_Props extends SubStateComponentProps {\n    country_short_code: string,\n    campaign_shortcode: string\n}\n\ninterface FolderItem {\n    folder_name: string,\n    chosen: boolean\n}\n\ninterface MainSection_State {\n    data: FolderItem[]\n}\n\nclass MainSection_Section extends Component<MainSection_Props, MainSection_State> {\n    constructor(props: MainSection_Props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n        this.handleCheck = this.handleCheck.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    async componentDidMount() {\n        this.setState({data: await this.getOptions(this.props.country_short_code, this.props.campaign_shortcode)})\n    }\n\n    async getOptions(country_short_code: string, campaign_code: string)\n        :\n        Promise<FolderItem[]> {\n        return await eel.get_category_overviews(country_short_code, campaign_code)()\n    }\n\n    handleCheck(e: React.FormEvent<HTMLInputElement>) {\n        let name = e.currentTarget.name\n        let checked = e.currentTarget.checked\n        let new_data = this.state.data.map(item => {\n            if (item.folder_name === name) {\n                return {\n                    folder_name: item.folder_name,\n                    chosen: checked\n                }\n            } else {\n                return item\n            }\n        })\n        this.setState({\n            data: new_data\n        })\n    }\n\n    handleSubmit() {\n        let choices = this.state.data.filter(item => (item.chosen)).map(item => item.folder_name)\n        this.props.globalStateSetter({\n            main_section_settings: {\n                categories_to_include: choices\n            }\n        }, 'Create Main Section')\n    }\n\n    render() {\n        return (\n            <>\n                <table>\n                    <thead>\n                    <td>\n                        Category\n                    </td>\n                    <td>\n                        Choose?\n                    </td>\n                    </thead>\n                    {this.state.data.map(dpack => {\n                        return (\n                            <tr key={dpack.folder_name}>\n                                <td>{dpack.folder_name}</td>\n                                <td><input name={dpack.folder_name} type={'checkbox'} checked={dpack.chosen}\n                                           onChange={this.handleCheck}/></td>\n                            </tr>\n                        )\n                    })}\n                </table>\n                <button onClick={this.handleSubmit} className={'button'} style={{\n                    fontSize: '0.9rem', marginBottom: '1rem'\n                }}>\n                    Add MainSection-creation with the chosen Folders to the task list\n                </button>\n                <small>Please ensure that the selected Categories have category overviews created.</small>\n            </>\n        );\n    }\n}\n\nexport default MainSection_Section","import * as React from 'react'\nimport {ChangeEvent, Component} from 'react'\nimport CountrySelector from \"../components/CountrySelector\";\nimport Collapsible from \"react-collapsible\";\nimport {eel} from '../App'\nimport CategoryOverviewSection from '../components/CategoryOverviewSection'\nimport Top5Section from '../components/Top5Section'\nimport ChartDataSection from \"../components/ChartDataSection\";\nimport MainSectionSection from \"../components/MainSection_Section\";\n\nexport interface CategoryOverviewsSettings {\n    category_names: Array<string>,\n    category_column_names: Array<string>\n}\n\ninterface ChartDataSettings {\n    min_region_count: number,\n    tags_selected: Array<string>\n}\n\ninterface Top5Settings {\n    folders_to_use: Array<string>\n}\n\ninterface MapDataSettings {\n    use_chart_data: boolean\n}\n\ninterface MainSectionSettings {\n    categories_to_include: Array<string> // can be sourced from settings for the Category Overviews\n}\n\ninterface ColumnRemap {\n    [key: string]: Array<string>\n}\n\ninterface UserSettings {\n    country_short_name?: string,\n    country_full_name?: string,\n    campaign_shortcode?: string,\n    chosenActions?: Array<string>,\n    category_overview_settings?: Partial<CategoryOverviewsSettings>,\n    chart_settings?: Partial<ChartDataSettings>,\n    top5_settings?: Partial<Top5Settings>,\n    map_settings?: Partial<MapDataSettings>,\n    main_section_settings?: Partial<MainSectionSettings>,\n    column_remap?: Partial<ColumnRemap>\n}\n\nconst defaultState: UserSettings = {\n    country_short_name: 'DE',\n    country_full_name: 'Germany',\n    campaign_shortcode: '',\n    chosenActions: [],\n    category_overview_settings: {\n        category_column_names: [],\n        category_names: []\n    },\n    chart_settings: {\n        min_region_count: 0,\n        tags_selected: []\n    },\n    column_remap: {},\n    main_section_settings: {\n        categories_to_include: []\n    },\n    map_settings: {\n        use_chart_data: true\n    },\n    top5_settings: {\n        folders_to_use: []\n    }\n}\n\nexport interface CountryLU {\n    [key: string]: string\n}\n\nexport interface SubStateComponentProps {\n    globalStateSetter: (stateUpdate: Partial<UserSettings>, emitter: string) => void,\n}\n\n\nclass FinalCsvGenerationSetup extends Component<{}, UserSettings> {\n    constructor(props: {}) {\n        super(props);\n        this.state = defaultState\n        this.handleComponentSubmit = this.handleComponentSubmit.bind(this)\n        this.handleCountryChange = this.handleCountryChange.bind(this)\n        this.handleStart = this.handleStart.bind(this)\n    }\n\n    handleCountryChange(e: ChangeEvent<HTMLSelectElement>) {\n        let ccs: CountryLU = {\n            'Germany': 'DE',\n            'France': 'FR',\n            'Spain': 'ES',\n            'Italy': 'IT',\n            'Austria': 'AT',\n            'Switzerland': 'CH'\n        }\n        console.log(e)\n        this.setState({\n            country_full_name: e.target.value,\n            country_short_name: ccs[e.target.value] || 'it'\n        })\n    }\n\n    handleComponentSubmit(stateUpdate: Partial<UserSettings>, emitter: string) {\n        let current_chosen_actions = this.state.chosenActions || []\n        this.setState({...stateUpdate, chosenActions: [...current_chosen_actions, emitter]})\n    }\n\n    handleStart() {\n        eel.start_final_csv_generation(this.state)\n        this.setState(defaultState)\n    }\n\n    render() {\n\n        return (<div className={'internal-component'} style={{textAlign: 'left'}}>\n            <div style={{\n                height: '30%',\n                color: 'white',\n                padding: '2.5rem 4rem',\n                textAlign: 'left'\n            }}>\n                <h1 style={{fontWeight: 'lighter', fontSize: '2.66rem'}}>\n                    Final CSV generation\n                </h1>\n                <Collapsible trigger={'Click for description'} triggerStyle={{fontStyle: 'italic', color: '#A7A8AA'}}>\n                    <p style={{fontWeight: 'lighter', fontSize: '0.8rem'}}>\n                        Use this page to generate the final CSVs. You can create files for all different styles.\n                        <br/><br/>\n                        The Final CSV Genenerator offers the following types of files:\n                    </p>\n                    <ul>\n                        <li style={styles.li}>\n                            <b>Comparison Overviews</b> - sources data from the comparisons folder and creates a summary\n                            file which lists the percentage popularity of the different options over the course of the\n                            year.\n                        </li>\n                        <li style={styles.li}>\n                            <b>Main Section</b> - takes the results from Comparison Overviews and finds the top choices\n                            for each category per year and region\n                        </li>\n                        <li style={styles.li}>\n                            <b>Top 5</b> - Uses a comparison dataset to determine the most popular choice in a given\n                            year at a national level. Determines most popular month and least popular month, as well as\n                            the seasonality inbetween.\n                        </li>\n                        <li style={styles.li}>\n                            <b>Chart</b> - takes results from Aggregated (have to be adjusted) and collates them into a\n                            yearly overview of single tags against each other\n                        </li>\n                        <li style={styles.li}>\n                            <b>Table</b> - takes the results from Chart and converts them into the table format where\n                            the within tag popularity over a year is broken down in percent. E.g. 10% of requests for X\n                            happen in January\n                        </li>\n                        <li style={styles.li}>\n                            <b>Map</b> - uses Data from the Chart to create a yearly map overview on how the interest in\n                            topic X is distributed across regions.\n                        </li>\n                    </ul>\n                </Collapsible>\n            </div>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                padding: '1.5rem',\n                lineHeight: '2rem',\n                justifyContent: 'space-between',\n                alignContent: 'space-between'\n            }}>\n                <h2>Set-Up</h2>\n                <div>\n                    <label className={'label'}>\n                        Country\n                        <CountrySelector value={this.state.country_full_name}\n                                         handleCountryChange={this.handleCountryChange}/>\n                    </label>\n                    <label className={'label'}>\n                        Campaign shortcode\n                        <input className={'input'} type={'text'} value={this.state.campaign_shortcode}\n                               onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                   this.setState({campaign_shortcode: e.target.value})\n                               }} required={true}/>\n                    </label>\n                    <br/>\n                </div>\n                <Collapsible\n                    trigger={`Category overviews  ${(this.state.chosenActions?.filter(item => (item.indexOf('Category') !== -1)).length || -1 > 0) ? ' ✅' : \"\"}`}\n                    triggerStyle={styles.subsection_headers}\n                    transitionTime={200} triggerTagName={'div'}>\n                    <CategoryOverviewSection country_short_code={this.state.country_short_name || 'DE'}\n                                             globalStateSetter={this.handleComponentSubmit}/>\n                </Collapsible>\n                <Collapsible\n                    trigger={`Top 5 ${(this.state.chosenActions?.filter(item => (item.indexOf('Top') !== -1)).length || -1 > 0) ? ' ✅' : \"\"}`}\n                    triggerStyle={styles.subsection_headers} transitionTime={200}\n                    triggerTagName={'div'}>\n                    <Top5Section country_short_code={this.state.country_short_name || 'DE'}\n                                 globalStateSetter={this.handleComponentSubmit}\n                                 key={this.state.country_short_name}/>\n                </Collapsible>\n                <Collapsible\n                    trigger={`Chart ${(this.state.chosenActions?.filter(item => (item.indexOf('Chart') !== -1)).length || -1 > 0) ? ' ✅' : \"\"}`}\n                    triggerStyle={styles.subsection_headers} transitionTime={200}\n                    triggerTagName={'div'}>\n                    <ChartDataSection globalStateSetter={this.handleComponentSubmit}\n                                      country_short_code={this.state.country_short_name || 'DE'}\n                                      key={this.state.country_short_name}/>\n                </Collapsible>\n                <Collapsible\n                    trigger={`Table ${(this.state.chosenActions?.filter(item => (item.indexOf('Table') !== -1)).length || -1 > 0) ? ' ✅' : \"\"}`}\n                    triggerStyle={styles.subsection_headers} transitionTime={200}\n                    triggerTagName={'div'}>\n                    <button onClick={() => this.setState({\n                        chosenActions: [...this.state.chosenActions || [], \"create Table Data\"]\n                    })} className={'button'} style={{\n                        fontSize: '0.9rem', marginBottom: '1rem'\n                    }}>\n                        Add Table Creation to Task-List\n                    </button>\n                </Collapsible>\n                <Collapsible\n                    trigger={`Main Section ${(this.state.chosenActions?.filter(item => (item.indexOf('Main') !== -1)).length || -1 > 0) ? ' ✅' : \"\"}`}\n                    triggerStyle={styles.subsection_headers} transitionTime={200}\n                    triggerTagName={'div'}>\n                    <MainSectionSection country_short_code={this.state.country_short_name || 'DE'}\n                                        campaign_shortcode={this.state.campaign_shortcode || 'Wed'}\n                                        globalStateSetter={this.handleComponentSubmit}\n                                        key={this.state.country_short_name}/>\n                </Collapsible>\n                <Collapsible\n                    trigger={`Map ${(this.state.chosenActions?.filter(item => (item.indexOf('Map') !== -1)).length || -1 > 0) ? ' ✅' : \"\"}`}\n                    triggerStyle={styles.subsection_headers} transitionTime={200}\n                    triggerTagName={'div'}>\n                    <label style={{margin: '1rem'}}>\n                        Use Chart Data\n                        <input type={'checkbox'}\n                               onChange={(e: React.FormEvent<HTMLInputElement>) => this.setState({\n                                   map_settings: {\n                                       use_chart_data: e.currentTarget.checked\n                                   }\n                               })} checked={this.state.map_settings?.use_chart_data}/>\n                    </label>\n                    <button onClick={() => this.setState({\n                        chosenActions: [...this.state.chosenActions || [], 'create Map Data']\n                    })} className={'button'} style={{\n                        fontSize: '0.9rem', marginBottom: '1rem'\n                    }}>\n                        Add Map Creation to Task-List\n                    </button>\n                </Collapsible>\n                <button onClick={this.handleStart} className={'button'} style={{\n                    fontSize: '0.9rem', marginBottom: '1rem'\n                }}>\n                    Start Final CSV Generation\n                </button>\n\n            </div>\n        </div>)\n    }\n\n}\n\nconst styles = {\n    li: {\n        paddingTop: '0.4rem',\n        paddingBottom: '0.4rem'\n    },\n    subsection_headers: {\n        fontStyle: 'bold',\n        fontSize: '1.2rem',\n        backgroundColor: '#48bfcc',\n        width: '95%',\n        padding: '0.3rem 1.5rem',\n        borderBottom: '1px solid white',\n        align: 'center'\n    }\n}\n\nexport default FinalCsvGenerationSetup\n\n","import * as React from 'react'\nimport {ChangeEvent, Component} from 'react'\nimport CountrySelector from \"../components/CountrySelector\";\nimport Collapsible from \"react-collapsible\";\nimport {eel} from '../App';\nimport ReactTagInput from \"@pathofdev/react-tag-input\";\nimport EditableTableClass from \"../components/EditableTable-Class\";\nimport {toast} from \"react-toastify\";\n//import CountryLU from '../pages/FinalCsvGeneration'\n\ntype InputType = 'Individual' | 'Comparison' | string\n\ninterface CountryLU {\n    [key: string]: string\n}\n\ninterface InputSetupSettings {\n    country_short_name: string,\n    country_full_name: string,\n    campaign_shortcode: string,\n    tags_selected: Array<string>,\n    input_type: InputType,\n    tag_settings: object[]\n}\n\ninterface TagSettings {\n    category: string,\n    option: string,\n    keywords: string[],\n    tag_id?: number\n}\n\nconst defaultState: InputSetupSettings = {\n    country_short_name: \"DE\",\n    country_full_name: \"Germany\",\n    campaign_shortcode: '',\n    tags_selected: [],\n    input_type: 'Comparison',\n    tag_settings: []\n}\n\nclass InputSetup extends Component<{}, InputSetupSettings> {\n    constructor(props: {}) {\n        super(props);\n        this.state = defaultState\n\n        this.handleCountryChange = this.handleCountryChange.bind(this)\n        this.handleRadioChange = this.handleRadioChange.bind(this)\n        this.handleTagInput = this.handleTagInput.bind(this)\n        this.handleDBDataGathering = this.handleDBDataGathering.bind(this)\n    }\n\n    handleCountryChange(e: ChangeEvent<HTMLSelectElement>) {\n        let ccs: CountryLU = {\n            'Germany': 'DE',\n            'France': 'FR',\n            'Spain': 'ES',\n            'Italy': 'IT',\n            'Austria': 'AT',\n            'Switzerland': 'CH'\n        }\n        console.log(e)\n        this.setState({\n            country_full_name: e.target.value,\n            country_short_name: ccs[e.target.value] || 'IT'\n        })\n    }\n\n    handleRadioChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            input_type: e.target.value\n        })\n    }\n\n    handleTagInput(items: Array<string>) {\n        this.setState({\n            tags_selected: items\n        })\n    }\n\n    handleDBDataGathering() {\n        if (this.state.tags_selected.length > 0) {\n            toast(\"Loading data from DB\", {\n                position: toast.POSITION.BOTTOM_RIGHT\n            });\n            eel.get_keywords_for_tags(this.state.country_short_name, this.state.tags_selected)((res: Array<TagSettings>) => {\n                console.log(res)\n                this.setState({\n                    tag_settings: [...this.state.tag_settings, ...res]\n                })\n            })\n        }\n    }\n\n    handleCreationSubmit() {\n        if (this.state.tag_settings.length === 0) {\n            toast(\"Cannot create file for empty data\", {\n                type: \"warning\"\n            })\n        } else {\n            eel.receive_data({data: this.state, destination: 'InputSetup'})\n        }\n    }\n\n    render() {\n        return (\n            <div className={'internal-component'} style={{textAlign: 'left'}}>\n                <div style={{\n                    height: '30%',\n                    color: 'white',\n                    padding: '2.5rem 4rem',\n                    textAlign: 'left'\n                }}>\n                    <h1 style={{fontWeight: 'lighter', fontSize: '2.66rem'}}>\n                        Scraping Input Setup\n                    </h1>\n                    <Collapsible trigger={'Click for description'}\n                                 triggerStyle={{fontStyle: 'italic', color: '#A7A8AA'}}>\n                        <p style={{fontWeight: 'lighter', fontSize: '0.9rem'}}>\n                            Use this page to generate the inputs for Scraping. You can choose between two modes:\n                            \"Individual Tag\" or \"Comparison\" mode\n                        </p>\n                        <ul>\n                            <li style={styles.li}>\n                                <b>Comparisons</b> - Gets you information on the relative strength of different options.<br/>Requires\n                                you to define the categories you want to look at (e.g. Garden services) and then the\n                                options within that category to look at. For each of these options you then have to\n                                define Keywords the script will use to represent the option.\n                                <br/>Per default, the scraper will select the keyword with the highest search volume to\n                                represent the option\n                                <br/><br/><b>Used for: Top5, Comparison Overviews</b>\n                            </li>\n                            <li style={styles.li}>\n                                <b>Individual <a\n                                    href={'https://sites.google.com/prontopro.fr/in-house-prontowiki/info/glossary'}\n                                    target={'_blank'} rel={'noopener noreferrer'}>Tags</a></b> - Aims to get information\n                                on the geographic popularity and the\n                                over-time popularity of an individual tag.<br/>The values obtained are relative to the\n                                peak of the tag's popularity. Thus a 100 for a given tag is not the same absolute value\n                                as a 100 of another.<br/>Uses multiple keywords averaged together as a proxy to\n                                represent the Tag level popularity. This is due to the fact that a Tag is a bigger\n                                concept than just a given keyword, meaning people requesting the same tag may look for\n                                it using multiple keywords.<br/><i>It is essentially like you're a supermarket and want\n                                to\n                                know how many people look for \"Vegetables\". You don't only want to count people that\n                                have\n                                literally asked for \"Vegetables\" but also people that looked for \"Zucchini\" or\n                                \"Cucumber\"</i>\n                                <br/><br/><b>Used for: Chart, Table, Map, (backup for Top5, when the script is run by\n                                itself)</b>\n                            </li>\n                        </ul>\n                    </Collapsible>\n                </div>\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    padding: '1.5rem',\n                    lineHeight: '2rem',\n                    justifyContent: 'space-between',\n                    alignContent: 'space-between'\n                }}>\n                    <h2>Set-Up</h2>\n                    <div>\n                        <label className={'label'}>\n                            Country\n                            <CountrySelector value={this.state.country_full_name}\n                                             handleCountryChange={this.handleCountryChange}/>\n                        </label>\n                        <label className={'label'}>\n                            Campaign shortcode\n                            <input className={'input'} type={'text'} value={this.state.campaign_shortcode}\n                                   onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                       this.setState({campaign_shortcode: e.target.value})\n                                   }} required={true}/>\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"Individual\"\n                                checked={this.state.input_type === 'Individual'}\n                                onChange={this.handleRadioChange}\n                            />\n                            Individual Tags\n                        </label>\n                        <label>\n                            <input\n                                type={\"radio\"}\n                                value={'Comparison'}\n                                checked={this.state.input_type === 'Comparison'}\n                                onChange={this.handleRadioChange}\n                            />\n                            Comparison\n                        </label>\n                        <label>\n                            <input\n                                type={\"radio\"}\n                                value={'Both'}\n                                checked={this.state.input_type === 'Both'}\n                                onChange={this.handleRadioChange}\n                            />\n                            Both\n                        </label>\n                        <Collapsible\n                            trigger={`Get Tag Data from DB ${(this.state.tags_selected.length || -1 > 0) ? ' ✅' : \"\"}`}\n                            triggerStyle={styles.subsection_headers}\n                            transitionTime={200} triggerTagName={'div'}>\n                            <div style={{\n                                width: '100%',\n                                padding: '1rem',\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                justifyContent: \"center\"\n                            }}>\n                                <ReactTagInput\n                                    tags={this.state.tags_selected || []}\n                                    onChange={this.handleTagInput}\n                                    placeholder=\"Type and press enter to input Keywords or Tag Ids\"\n                                    removeOnBackspace={true}\n                                />\n                                <button className={'button'} style={{\n                                    fontSize: '0.9rem', marginBottom: '1rem'\n                                }}\n                                        onClick={this.handleDBDataGathering}\n                                >\n                                    Gather Keywords from DB\n                                </button>\n                            </div>\n                        </Collapsible>\n                        <hr/>\n                        <EditableTableClass initial_columns={[\n                            {\n                                field: 'category',\n                                title: 'Category',\n                                cellStyle: {\n                                    fontSize: '0.8rem'\n                                }\n                            },\n                            {\n                                field: 'option',\n                                title: 'Option'\n                            },\n                            {\n                                field: 'keywords',\n                                title: 'Keywords',\n                                editComponent: TagField,\n                                render: (rowData) => {\n                                    if (rowData.keywords) {\n                                        return rowData.keywords.join(\", \")\n                                    } else {\n                                        return \"\"\n                                    }\n                                }\n                            }\n                        ]} title={\"Set-up\"} data={this.state.tag_settings} handleDataChange={(data => this.setState({\n                            tag_settings: data\n                        }))}/>\n                        <div style={{display: \"flex\", flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\n                            <button className={'button'} style={{\n                                fontSize: '0.9rem', marginBottom: '1rem'\n                            }}\n                                    onClick={() => eel.receive_data({data: this.state, destination: 'InputSetup'})}\n                            >\n                                Submit & Create Input File\n                            </button>\n                            <button className={'button'} style={{\n                                fontSize: '0.9rem', marginBottom: '1rem'\n                            }}\n                                    onClick={() => this.setState(defaultState)}\n                            >\n                                Reset All\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    li: {\n        paddingTop: '0.4rem',\n        paddingBottom: '0.4rem'\n    },\n    subsection_headers: {\n        fontStyle: 'bold',\n        fontSize: '1.2rem',\n        backgroundColor: '#48bfcc',\n        width: '95%',\n        padding: '0.3rem 1.5rem',\n        borderBottom: '1px solid white',\n        align: 'center'\n    }\n}\n\nexport default InputSetup\n\n\nconst TagField = (props: { value: Array<string>, onChange: (tags: Array<string>) => void }) => {\n    return <ReactTagInput tags={props.value || []} onChange={tags => props.onChange(tags)} removeOnBackspace={true}/>\n}","import * as React from \"react\";\nimport {eel} from '../App';\nimport {Component} from 'react'\nimport Collapsible from \"react-collapsible\";\n\ninterface DBSettings {\n    host: string,\n    user: string,\n    password: string\n}\n\ninterface DBCredsState {\n    details: Partial<DBSettings>\n}\n\nclass DatabaseCredsSetup extends Component<{}, DBCredsState> {\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            details: {}\n        }\n    }\n\n    componentDidMount() {\n        eel.get_db_access_data()((d: {}) => this.setState({\n            details: d\n        }))\n    }\n\n    render() {\n        return (\n            <div className={'internal-component'} style={{textAlign: 'left'}}>\n                <div style={{\n                    height: '30%',\n                    color: 'white',\n                    padding: '2.5rem 4rem',\n                    textAlign: 'left'\n                }}>\n                    <h1 style={{fontWeight: 'lighter', fontSize: '2.66rem'}}>\n                        Database Credentials Setup\n                    </h1>\n                    <Collapsible trigger={'Click for description'}\n                                 triggerStyle={{fontStyle: 'italic', color: '#A7A8AA'}}>\n                        <p style={{fontWeight: 'lighter', fontSize: '0.9rem'}}>\n                            Use this page to set up your database credentials\n                        </p>\n                    </Collapsible>\n                </div>\n                <div style={{\n                    padding: '3rem',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}>\n                    <div>\n                        <label>\n                            Host\n                            <input className={'input'} type={'text'} onChange={event => this.setState({\n                                details: {\n                                    ...this.state.details,\n                                    host: event.target.value.trim()\n                                }\n                            })} value={this.state.details.host}/>\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Username\n                            <input className={'input'} type={'text'} onChange={event => this.setState({\n                                details: {\n                                    ...this.state.details,\n                                    user: event.target.value.trim()\n                                }\n                            })} value={this.state.details.user}/>\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Password\n                            <input className={'input'} type={'password'} onChange={event => this.setState({\n                                details: {\n                                    ...this.state.details,\n                                    password: event.target.value.trim()\n                                }\n                            })}\n                            value={this.state.details.password} />\n                        </label>\n                    </div>\n                    <button className={'button'} style={{\n                                fontSize: '0.9rem', marginBottom: '1rem'\n                            }}\n                                    onClick={() => {\n                                        console.log(\"Trying to save db_acces_details\")\n                                        eel.save_db_access_data(this.state.details)\n                                    }}\n                            >\n                                Save Credentials\n                            </button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default DatabaseCredsSetup","import * as React from 'react';\nimport {eel} from '../App'\nimport {Component} from 'react';\n\ninterface LoggingState {\n    messages: string[]\n}\n\nfunction receiveLog(msg: string) {\n    //console.log(\"got message \" + msg)\n    window.LoggingComponent.receiveLog(msg)\n}\n\n// Separating\nwindow.eel.expose(receiveLog, 'receiveLog')\n\nclass LoggingTest extends Component<{}, LoggingState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            messages: []\n        }\n        window.LoggingComponent = this;\n        this.receiveLog = this.receiveLog.bind(this)\n    }\n\n    receiveLog(msg: string) {\n        let keptMsgs = this.state.messages.splice(-10, 10)\n        this.setState({\n            messages: [...keptMsgs, msg]\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={() => eel.sendLogs()}>Start receiving</button>\n            <p>\n                {this.state.messages.map(msg =>  <p>{msg}<br/></p>)}\n            </p>\n            </div>\n        )\n    }\n}\n\nexport default LoggingTest","import * as React from 'react'\nimport {ChangeEvent, Component} from 'react'\nimport CountrySelector from \"../components/CountrySelector\";\nimport Collapsible from \"react-collapsible\";\n// import {eel} from '../App';\n// import {toast} from \"react-toastify\";\nimport {CountryLU} from \"./FinalCsvGeneration\";\n\nexport const eel = window.eel\neel.set_host('ws://localhost:8080')\n\ninterface ScrapingItem {\n    title: string,\n    timestamp: number\n}\n\ninterface StatusUpdate {\n    scraping_results?: {\n        files_expected?: number,\n        files_generated?: number\n    },\n    scraping_progress?: {\n        done?: number,\n        to_do?: number,\n        progress_rate_per_minute?: number\n    },\n    scraping_item?: ScrapingItem\n}\n\ninterface ScraperSettingsState {\n    sourceFile: string,\n    scraping_type: string,\n    scraping_results: {\n        files_expected: number,\n        files_generated: number\n    },\n    scraping_progress: {\n        done: number,\n        to_do: number | undefined,\n        progress_rate_per_minute: number\n    },\n    scraping_items: Array<ScrapingItem>,\n    campaign_shortcode: string,\n    country_short_name: string,\n    country_full_name: string,\n    deduplicate_keywords: boolean,\n    log: Array<string>\n}\n\nconst defaultState: ScraperSettingsState = {\n    sourceFile: \"\",\n    scraping_type: \"Individual - All Regions\",\n    scraping_results: {\n        files_expected: 0,\n        files_generated: 0\n    },\n    scraping_progress: {\n        done: 0,\n        to_do: undefined,\n        progress_rate_per_minute: 4\n    },\n    scraping_items: [],\n    campaign_shortcode: \"\",\n    country_short_name: \"DE\",\n    country_full_name: \"Germany\",\n    deduplicate_keywords: false,\n    log: []\n}\n\nfunction ScraperReceiveLog(msg: string) {\n    window.ScraperComponent.receiveFrontEndLog(msg)\n}\n\nfunction ScraperReceiveStatus(update: StatusUpdate) {\n    window.ScraperComponent.receiveStatusUpdates(update)\n}\n\neel.expose(ScraperReceiveLog, 'ScraperReceiveLog')\neel.expose(ScraperReceiveStatus, 'ScraperReceiveStatus')\n\nclass Scraper extends Component<{}, ScraperSettingsState> {\n    private fileInput: React.RefObject<HTMLInputElement>;\n\n    constructor(props: {}) {\n        super(props);\n        this.state = defaultState\n        this.fileInput = React.createRef();\n\n        window.ScraperComponent = this;\n\n        this.handleCountryChange = this.handleCountryChange.bind(this)\n        this.handleRadioChange = this.handleRadioChange.bind(this)\n        this.useDefaultFileHandler = this.useDefaultFileHandler.bind(this)\n        this.receiveFrontEndLog = this.receiveFrontEndLog.bind(this)\n        this.receiveStatusUpdates = this.receiveStatusUpdates.bind(this)\n    }\n\n    handleCountryChange(e: ChangeEvent<HTMLSelectElement>) {\n        let ccs: CountryLU = {\n            'Germany': 'DE',\n            'France': 'FR',\n            'Spain': 'ES',\n            'Italy': 'IT',\n            'Austria': 'AT',\n            'Switzerland': 'CH'\n        }\n        console.log(e)\n        this.setState({\n            country_full_name: e.target.value,\n            country_short_name: ccs[e.target.value] || 'IT'\n        })\n    }\n\n    handleRadioChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            scraping_type: e.target.value\n        })\n    }\n\n    useDefaultFileHandler(e: unknown) {\n        eel.get_scraping_file(this.state.country_short_name, this.state.campaign_shortcode, this.state.scraping_type)((filepath: string) => this.setState({sourceFile: filepath}))\n    }\n\n    receiveFrontEndLog(msg: string) {\n        let curr_messages = this.state.log.splice(-10, 10)\n        this.setState({log: [...curr_messages, msg]})\n    }\n\n    receiveStatusUpdates(update: StatusUpdate) {\n        console.log(update)\n        //const {scraping_item, scraping_progress, scraping_results} = update\n        const {scraping_results: {files_generated, files_expected} = {}, scraping_progress: {to_do, progress_rate_per_minute, done} = {}, scraping_item} = update\n        let num_todos = (to_do) ? to_do : this.state.scraping_progress.to_do;\n        let num_done = (done) ? this.state.scraping_progress.done + done : this.state.scraping_progress.done;\n        let num_files_gen = (files_generated) ? this.state.scraping_results.files_generated + files_generated : this.state.scraping_results.files_generated;\n        let num_files_exp = (files_expected) ? this.state.scraping_results.files_expected + files_expected : this.state.scraping_results.files_expected;\n        let cur_progress_rate = (progress_rate_per_minute) ? (progress_rate_per_minute / 4) + (this.state.scraping_progress.progress_rate_per_minute * 3 / 4) : this.state.scraping_progress.progress_rate_per_minute;\n        let scraping_items = (scraping_item) ? [...this.state.scraping_items, scraping_item] : this.state.scraping_items;\n        this.setState({\n            scraping_results: {\n                files_expected: num_files_exp,\n                files_generated: num_files_gen\n            },\n            scraping_progress: {\n                progress_rate_per_minute: cur_progress_rate,\n                done: num_done,\n                to_do: num_todos\n            },\n            scraping_items: scraping_items\n        })\n    }\n\n    render() {\n        let time_left = (this.state.scraping_progress.to_do || 0 - this.state.scraping_progress.done) / this.state.scraping_progress.progress_rate_per_minute\n        if (time_left !== time_left) {\n            time_left = 0\n        }\n        let time_left_str = (time_left / 60 >= 1) ? `${Math.round((time_left / 60) * 100) / 100} h` : `${Math.round(time_left)} min`\n        return (\n            <div className={'internal-component'} style={{textAlign: 'left'}}>\n                <div style={{\n                    height: '30%',\n                    color: 'white',\n                    padding: '2.5rem 4rem',\n                    textAlign: 'left'\n                }}>\n                    <h1 style={{fontWeight: 'lighter', fontSize: '2.66rem'}}>\n                        Scraping\n                    </h1>\n                    <Collapsible trigger={'Click for description'}\n                                 triggerStyle={{fontStyle: 'italic', color: '#A7A8AA'}}>\n                        <p style={{fontWeight: 'lighter', fontSize: '0.9rem'}}>\n                            Use this page to set up the scraper and start it\n                        </p>\n                        <ul>\n                            <li style={styles.li}>\n                                <b>Comparisons</b> - Gets you information on the relative strength of different options.<br/>Uses\n                                the ProntoPro_Trends_Questions_{this.state.country_short_name}.json files for input.\n                                <br/>Per default, the scraper will select the keyword with the highest search volume to\n                                represent the option\n                                <br/><br/><b>Used for: Top5, Comparison Overviews</b>\n                            </li>\n                            <li style={styles.li}>\n                                <b>Individual <a\n                                    href={'https://sites.google.com/prontopro.fr/in-house-prontowiki/info/glossary'}\n                                    target={'_blank'} rel={'noopener noreferrer'}>Tags</a></b> - Aims to get information\n                                on the geographic popularity and the\n                                over-time popularity of an individual tag.<br/>The values obtained are relative to the\n                                peak of the tag's popularity. Thus a 100 for a given tag is not the same absolute value\n                                as a 100 of another.<br/>Requires a file\n                                like {(this.state.campaign_shortcode.length > 0) && this.state.campaign_shortcode + \"_\"}Keywords_{this.state.country_short_name}.csv\n                                <br/><br/><b>Used for: Chart, Table, Map, (backup for Top5, when the script is run by\n                                itself)</b><br/><br/>\n                                <b>Variations</b>\n                                <ul>\n                                    <li>\n                                        All Regions - to scrape for all subregions of a country\n                                    </li>\n                                    <li>\n                                        Country-level only - scrape only for the country level (e.g. useful for quick\n                                        scouting scrapes, saves up to 20x of scraping time)\n                                    </li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </Collapsible>\n                </div>\n                <Collapsible trigger={\"Set-Up    ▶️\"} triggerStyle={styles.subsection_headers} transitionTime={200}\n                             triggerTagName={'div'} open={true} triggerWhenOpen={'Set-Up   🔽'}>\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        padding: '1.5rem',\n                        lineHeight: '2rem',\n                        justifyContent: 'space-between',\n                        alignContent: 'space-between'\n                    }}>\n                        <div>\n                            <label className={'label'}>\n                                Country\n                                <CountrySelector value={this.state.country_full_name}\n                                                 handleCountryChange={this.handleCountryChange}/>\n                            </label>\n                            <label className={'label'}>\n                                Campaign shortcode\n                                <input className={'input'} type={'text'} value={this.state.campaign_shortcode}\n                                       onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                           this.setState({campaign_shortcode: e.target.value})\n                                       }} required={true}/>\n                            </label>\n                            <div style={{display: 'flex', justifyContent: 'space-between', padding: '0rem 2rem'}}>\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Individual - All Regions\"\n                                        checked={this.state.scraping_type === 'Individual - All Regions'}\n                                        onChange={this.handleRadioChange}\n                                        style={{marginRight: '0.5rem'}}\n                                    />\n                                    Individual Tags - All Regions\n                                </label>\n                                <label>\n                                    <input\n                                        type={\"radio\"}\n                                        value={'Comparison'}\n                                        checked={this.state.scraping_type === 'Comparison'}\n                                        onChange={this.handleRadioChange}\n                                        style={{marginRight: '0.5rem'}}\n                                    />\n                                    Comparison\n                                </label>\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Individual - CC only\"\n                                        checked={this.state.scraping_type === 'Individual - CC only'}\n                                        onChange={this.handleRadioChange}\n                                        style={{marginRight: '0.5rem'}}\n                                    />\n                                    Individual - CC only\n                                </label>\n                            </div>\n                            <div style={{padding: '1rem'}}><label>\n                                Source file:\n                                <input type={'file'} ref={this.fileInput}\n                                       accept={`${(this.state.scraping_type === 'Comparison') ? '.json' : '.csv'}`}\n                                       multiple={false}\n                                       onChange={(event) => {\n                                           let file = (event.target.files) ? event.target.files[0].name : \"\"\n                                           this.setState({\n                                               sourceFile: file\n                                           })\n                                       }}\n                                       style={{paddingLeft: '1rem'}}\n                                />\n                            </label>\n                                <button onClick={this.useDefaultFileHandler}>Use default</button>\n                            </div>\n                            <p><b>Chosen File file:</b> {this.state.sourceFile}</p>\n                            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n                                <label>\n                                    Deduplicate Keywords\n                                    <input type={'checkbox'} checked={this.state.deduplicate_keywords}\n                                           onChange={(e) => this.setState({deduplicate_keywords: e.currentTarget.checked})}\n                                           disabled={(this.state.scraping_type.indexOf('Individual') === -1)}/>\n                                </label>\n                                <button className={'button'} style={{\n                                    fontSize: '0.9rem', marginBottom: '1rem', width: '30%'\n                                }}\n                                        onClick={() => eel.scrape(this.state)}\n                                >\n                                    Run Scraper\n                                </button>\n                            </div>\n\n                            <hr/>\n                        </div>\n                    </div>\n                </Collapsible>\n                <StatusDisplay progress_done={this.state.scraping_progress.done}\n                               progress_to_do={this.state.scraping_progress.to_do} time_left_str={time_left_str}\n                               log={this.state.log}/>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    li: {\n        paddingTop: '0.4rem',\n        paddingBottom: '0.4rem'\n    },\n    subsection_headers: {\n        fontStyle: 'bold',\n        fontSize: '1.2rem',\n        backgroundColor: '#48bfcc',\n        width: '95%',\n        padding: '0.3rem 1.5rem',\n        borderBottom: '1px solid white',\n        align: 'center'\n    }\n}\n\nexport default Scraper\n\nconst StatusDisplay = ({progress_done, progress_to_do, time_left_str, log}: { progress_done: number, progress_to_do: number | undefined, time_left_str: string, log: Array<string> }) => {\n    if (log.length > 0) {\n        return (<>\n            <div style={{justifyContent: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column', marginTop: '1.5rem'}}>\n                <h1>Running...</h1>\n                <br/>\n                <progress value={progress_done} max={progress_to_do}\n                          title={'Loading'} style={{width: '60%'}}/>\n                <p>Expected duration: {time_left_str}</p>\n            </div>\n            <div style={{\n                margin: '3rem',\n                backgroundColor: '#1d364b',\n                borderRadius: '10px',\n                padding: '1.5rem',\n                lineHeight: '0.8rem'\n            }}>\n                <b>Log</b>\n                {log.map(item => (<p>{item}</p>))}\n            </div>\n        </>)\n    } else {\n        return null\n    }\n}","import * as React from 'react';\nimport {Pie, Doughnut} from \"react-chartjs-2\";\nimport {ChangeEvent, Component} from 'react';\nimport {eel} from '../App';\n// import Collapsible from \"react-collapsible\";\nimport CountrySelector from \"../components/CountrySelector\";\nimport {CountryLU} from \"./FinalCsvGeneration\";\nimport Select from 'react-select'\nimport {ValueType} from 'react-select'\n\ninterface ChartData {\n    labels: string[],\n    datasets: Array<{data: number[], backgroundColor: string[], hoverBackgroundColor: string[]}>\n}\n\ninterface FinalCsvInspection_State {\n    chartType: 'pie' | 'bar' | 'line',\n    sourceFile: string,\n    settings: {\n        year?: number,\n        region?: string\n    },\n    country_short_name: string,\n    country_full_name: string,\n    campaign_shortcode: string,\n    available_campaigns: Array<SelectionItem>,\n    available_files: Array<SelectionItem>,\n    available_options: {\n        year: Array<SelectionItem>,\n        regions: Array<SelectionItem>\n    },\n    data: ChartData\n}\n\ntype SelectionItem = {\n    value: string | number,\n    label: string\n}\n\nconst data = {\n    labels: [\n        'Red',\n        'Blue',\n        'Yellow'\n    ],\n    datasets: [{\n        data: [200, 50, 100],\n        backgroundColor: [\n            '#FF6384',\n            '#36A2EB',\n            '#FFCE56'\n        ],\n        hoverBackgroundColor: [\n            '#FF6384',\n            '#36A2EB',\n            '#FFCE56'\n        ]\n    }]\n};\n\nconst defaultState: FinalCsvInspection_State = {\n    chartType: 'pie',\n    sourceFile: '',\n    settings: {\n        year: 2020,\n        region: \"\"\n    },\n    country_full_name: 'Germany',\n    country_short_name: 'DE',\n    campaign_shortcode: '',\n    available_campaigns: [],\n    available_files: [],\n    available_options: {\n        year: [],\n        regions: []\n    },\n    data: data\n}\n\n\nclass FinalCsvInspection extends Component<{}, FinalCsvInspection_State> {\n    constructor(props: {}) {\n        super(props);\n        this.state = defaultState;\n        this.handleCountryChange = this.handleCountryChange.bind(this);\n        this.updateFileOptions = this.updateFileOptions.bind(this);\n        this.updateCampaignOptions = this.updateCampaignOptions.bind(this);\n        this.getSelectionOptions = this.getSelectionOptions.bind(this);\n        this.getData = this.getData.bind(this)\n    }\n\n    handleCountryChange(e: ChangeEvent<HTMLSelectElement>) {\n        let ccs: CountryLU = {\n            'Germany': 'DE',\n            'France': 'FR',\n            'Spain': 'ES',\n            'Italy': 'IT',\n            'Austria': 'AT',\n            'Switzerland': 'CH'\n        }\n        console.log(e)\n        this.setState({\n            country_full_name: e.target.value,\n            country_short_name: ccs[e.target.value] || 'IT'\n        }, this.updateCampaignOptions)\n    }\n\n    updateCampaignOptions() {\n        eel.get_available_campaigns(this.state.country_short_name)((campaigns: Array<string>) => {\n            let available_campaigns = campaigns.map(x => {\n                return {value: x, label: x}\n            })\n            this.setState({available_campaigns: available_campaigns})\n        })\n    }\n\n    componentDidMount() {\n        this.updateCampaignOptions()\n    }\n\n    updateFileOptions() {\n        eel.get_final_category_overviews(this.state.country_short_name, this.state.campaign_shortcode)((files: Array<string>) => {\n            let available_files = files.map(x => {\n                return {\n                    value: x,\n                    label: x\n                }\n            })\n            this.setState({available_files: available_files})\n        })\n    }\n\n    getSelectionOptions() {\n        eel.get_available_options_from_file(this.state.sourceFile)((dict: { Year: SelectionItem[], ticket_geo_region_name: SelectionItem[], full_csv_path: string }) => {\n            console.log(dict)\n            this.setState({\n                available_options: {\n                    regions: dict.ticket_geo_region_name,\n                    year: dict.Year\n                },\n                sourceFile: dict.full_csv_path\n            })\n        })\n    }\n\n    getData() {\n        console.log(\"In getData\")\n        if (this.state.settings.year && this.state.settings.region) {\n            console.log(\"Getting data from file: \" + this.state.sourceFile)\n            eel.get_data_for_chosen_options(this.state.sourceFile, this.state.settings.year, this.state.settings.region)((data: ChartData) => {\n               console.log(data)\n                this.setState({\n                   data: data\n               })\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div id={'settings'} style={{textAlign: 'left'}}>\n                    <label className={'label'}>\n                        Country\n                        <CountrySelector value={this.state.country_full_name}\n                                         handleCountryChange={this.handleCountryChange}/>\n                    </label>\n                    <br/>\n                    <label className={'label'}>Select Campaign\n                        <Select options={this.state.available_campaigns}\n                                onChange={(selected: ValueType<SelectionItem> | SelectionItem) => {\n                                    if (selected) {\n                                        let campaign_shortcode = '' + (selected as SelectionItem).value\n                                        this.setState({\n                                            campaign_shortcode: campaign_shortcode\n                                        }, this.updateFileOptions)\n                                    }\n                                }} styles={{\n                            option: (provided) => ({\n                                ...provided,\n                                color: 'black'\n                            }),\n                            container: (provided) => ({\n                                ...provided,\n                                width: 200,\n                                display: 'inline-block',\n                                marginLeft: '1rem'\n                            })\n                        }\n                        }/></label>\n                    <br/>\n                    <label className={'label'}>Select File\n                        <Select options={this.state.available_files}\n                                onChange={(selected: ValueType<SelectionItem> | SelectionItem) => {\n                                    if (selected) {\n                                        let sourceFile = '' + (selected as SelectionItem).value\n                                        this.setState({\n                                            sourceFile: sourceFile\n                                        }, this.getSelectionOptions)\n                                    }\n                                }} styles={{\n                            option: (provided) => ({\n                                ...provided,\n                                color: 'black'\n                            }),\n                            container: (provided) => ({\n                                ...provided,\n                                width: 200,\n                                display: 'inline-block',\n                                marginLeft: '1rem'\n                            })\n                        }\n                        }/>\n                    </label>\n                    <br/>\n                    <label className={'label'}>Select Year\n                        <Select options={this.state.available_options.year}\n                                onChange={(selected: ValueType<SelectionItem> | SelectionItem) => {\n                                    if (selected) {\n                                        let year = (selected as SelectionItem).value\n                                        if (typeof year === 'string') {\n                                            year = parseInt(year)\n                                        }\n                                        let region = this.state.settings.region\n                                        this.setState({\n                                            settings: {\n                                                year: year,\n                                                region: region\n                                            }\n                                        }, this.getData)\n                                    }\n                                }} styles={{\n                            option: (provided) => ({\n                                ...provided,\n                                color: 'black'\n                            }),\n                            container: (provided) => ({\n                                ...provided,\n                                width: 200,\n                                display: 'inline-block',\n                                marginLeft: '1rem'\n                            })\n                        }\n                        }/>\n                    </label>\n                    <br/>\n                    <label className={'label'}>Select Region\n                        <Select options={this.state.available_options.regions}\n                                onChange={(selected: ValueType<SelectionItem> | SelectionItem) => {\n                                    if (selected) {\n                                        let val = '' + (selected as SelectionItem).value\n                                        let year = this.state.settings.year;\n                                        this.setState({\n                                            settings: {\n                                                region: val,\n                                                year: year\n                                            }\n                                        }, this.getData)\n                                    }\n                                }} styles={{\n                            option: (provided) => ({\n                                ...provided,\n                                color: 'black'\n                            }),\n                            container: (provided) => ({\n                                ...provided,\n                                width: 200,\n                                display: 'inline-block',\n                                marginLeft: '1rem'\n                            })\n                        }\n                        }/>\n                    </label>\n                </div>\n                <div style={{textAlign: 'left'}}>\n                </div>\n                {(this.state.chartType === 'pie') && <Pie data={this.state.data} legend={{labels: {fontColor: 'white'}}}/>}\n            </div>\n\n        )\n    }\n}\n\nexport default FinalCsvInspection","import React, {Component} from 'react';\nimport Header from './components/header'\nimport {\n    Route,\n    Switch,\n    HashRouter\n} from 'react-router-dom'\nimport {ToastContainer, toast} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css';\nimport \"@pathofdev/react-tag-input/build/index.css\";\nimport Home from './pages/Home'\nimport DatapipelineStart from \"./pages/DatapipelineStart\";\nimport InspectionStart from \"./pages/InspectionStart\";\nimport ValidationStart from \"./pages/ValidationStart\";\nimport ValidationSetup from \"./pages/ValidationSetup\";\nimport NavSideBar from \"./components/NavBar\";\nimport FinalCsvGeneration from './pages/FinalCsvGeneration';\nimport InputSetup from \"./pages/InputSetup\";\nimport DatabaseCredsSetup from \"./pages/DatabaseCredsSetup\";\nimport LoggingTest from \"./pages/LoggingTest\";\nimport Scraper from \"./pages/Scraper\";\nimport FinalCsvInspection from \"./pages/FinalCsvInspection\";\n\n\nexport const eel = window.eel\neel.set_host('ws://localhost:8080')\n\nfunction notification(msg, options) {\n    //console.log(\"got message \" + msg)\n    window.AppComponent.notification(msg, options)\n}\n\nfunction console_log(msg) {\n    console.log(msg)\n}\n\n// Separating\nwindow.eel.expose(notification, 'notification')\nwindow.eel.expose(console_log, 'console_log')\n\nconst navItems = [\n    {\n        title: 'Data Pipeline',\n        link: '/DataPipeline',\n        children: [\n            {\n                title: 'Input Setup',\n                link: '/DataPipeline-InputSetup'\n            },\n            {\n                title: 'Scraping',\n                link: '/DataPipeline-Scraping'\n            },\n            {\n                title: 'Final CSV Generation',\n                link: '/DataPipeline-FinalCsvGeneration',\n            },\n            {\n                title: 'Validation',\n                link: '/DataPipeline-Validation',\n                children: [\n                    {\n                        title: 'Set up Validation',\n                        link: '/DataPipeline-Validation-SetUp'\n                    },\n                    {\n                        title: 'Run Validation [NI]',\n                        link: '/DataPipeline-Validation-Run'\n                    }\n                ]\n            },\n            {\n                title: 'Special Tools',\n                link: '/DataPipeline-SpecialTools',\n                children: [\n                    {\n                        title: 'Database Requests',\n                        link: '/DataPipeline-SpecialTools-DataBaseRequest'\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        title: 'Inspection',\n        link: '/Inspect',\n        children: [\n            {\n                title: 'Tag Inspection [NI]',\n                link: '/Inspect-Individual'\n            },\n            {\n                title: 'Comparison Inspection [NI]',\n                link: '/Inspect-Comparison'\n            },\n            {\n                title: 'Final CSV Inspection',\n                link: '/Inspect-FinalCSVs'\n            }\n        ]\n    },\n    {\n        title: 'Settings',\n        link: '/Settings',\n        children: [\n            {\n                title: 'Database Credentials',\n                link: '/Settings-DatabaseCredentials'\n            }\n        ]\n    }\n]\n\n\nexport class App extends Component {\n    constructor(props) {\n        super(props);\n        this.notification = this.notification.bind(this)\n        window.AppComponent = this;\n    }\n\n    notification(msg, options) {\n        toast(msg, {\n            ...options,\n            position: toast.POSITION.BOTTOM_RIGHT,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <HashRouter>\n                    <div style={{display: 'flex', alignItems: 'stretch', height: '100%'}}>\n                        <div style={{flex: 1, minWidth: '10%', maxWidth: '18%', height: '100%'}}>\n                            <NavSideBar items={navItems}/>\n                        </div>\n                        <div style={{flex: 1, backgroundColor: '#315c80'}}>\n                            <Switch>\n                                <Route exact path=\"/\">\n                                    <Home/>\n                                </Route>\n                                <Route exact path={'/DataPipeline'}>\n                                    <DatapipelineStart/>\n                                </Route>\n                                <Route\n                                    exact path={'/DataPipeline-FinalCsvGeneration'}>\n                                    <FinalCsvGeneration/>\n                                </Route>\n                                <Route exact path={'/Inspect'}>\n                                    <InspectionStart/>\n                                </Route>\n                                <Route exact path={'/DataPipeline-Validation'}>\n                                    <ValidationStart/>\n                                </Route>\n                                <Route exact path={'/DataPipeline-Validation-SetUp'}>\n                                    <ValidationSetup/>\n                                </Route>\n                                <Route exact path={'/DataPipeline-InputSetup'}>\n                                    <InputSetup/>\n                                </Route>\n                                <Route exact path={'/Settings-DatabaseCredentials'}>\n                                    <DatabaseCredsSetup/>\n                                </Route>\n                                <Route exact path={'/TEST'}>\n                                    <LoggingTest/>\n                                </Route>\n                                <Route exact path={'/DataPipeline-Scraping'}>\n                                    <Scraper/>\n                                </Route>\n                                <Route exact path={'/Inspect-FinalCSVs'}>\n                                    <FinalCsvInspection/>\n                                </Route>\n                                <Route>\n                                    <div>\n                                        <h1 style={{padding: '2rem'}}>\n                                            No Match\n                                        </h1>\n                                        <h2 style={{padding: '2rem'}}>\n                                            It may be that this section has not yet been implemented\n                                        </h2>\n                                    </div>\n                                </Route>\n                            </Switch>\n                            <ToastContainer/>\n                        </div>\n                    </div>\n                </HashRouter>\n            </div>\n        )\n            ;\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n    google: {\n        families: ['Lato', 'sans-serif']\n    }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}